Direct visual odometry forgone, replaced by semi-dense depth filtering (combining direct tracking with keypoints).
However, this does not build a consistent global map of the environment including loop closures.

In pose graph optimization, the world is represented as a number of keyframes connected by
pose-pose constraints, optimized by g2o.

LSD-SLAM locally tracks the motion of the camera and builds a consistent global map[1].
The method uses direct image alignment[2] + filtering-based estimation of semi-dense depth maps,
allowing correction of accumulated-drift.

1st step: calibrate the camera then undistort frames (use camera intrinsics to create matrix K)


Image (photometric) alignment using warp function and by optimizing warp params:

[1] a pose-graph consisting of keyframes as vertices and 3d similarity transforms as edges (sim3)

[2] two images are aligned by Gauss-Newton minimization of the photometric error(eq. 5)
    which gives the max-likelihood estimator for the parameter(s) of the warp between those two images.
    Starting with initial estimate (pose), we compute the increment (see eq. 6) and sum to minimize error.

    I have an E (sum of squared photometric residuals vector, squint them eyes to read the paper). At the current estimate,
    I can approximate E near the estimate by a quadratic model using the first-order Taylor (not Taylor
    series for the AP students, instead its Taylor for the multivariates) of the residuals(*).
    J is the derivative of the stacked residual vector r, (J^T * J) is the Gauss-Newton approx. of the Hessian of E, see (eq. 6).

    everything is also multipled by a weight matrix W to avoid occlusion/reflection.

    see first-order taylor (linearization); you expand out (r_0 + J delta)**2 algebraically. the delta behind J is what I'm
    trying to solve for (I think), which is also the left-multiplied increment.



lie group: apparently I can do algebra and calculus on these (smooth manifold)
lie algebra: "tangent space at the identity of the lie group." represents infinitesimal motions (tiny rotations,
translations) that when exponentiated, moves along the lie group.

rotations live on SO(3) --> 3d manifold embedded in 9d space(3x3 matrices) -- captures orientation
rigid-body poses live on SE(3) --> 6d manifold (3 translation + 3 rot)

se(3) -- represent infinitesimal rigid-body motions.

internal operations:
- employ scale-aware image alignment to estimate similarity transform between two keyframes
- incorporate probabilistically consistent uncertainty of estimated depth into tracking


what are semi-dense depth maps? how are they represented pragmatically?
what is direct image alignment?
what is filtering-based estimation of semi-dense depth maps?
what is a covariance?

Graph SLAM tutorial: p.4


algorithm flow:

1. frame capture
* captures a new grayscale image
* camera intrinsics (focal length, principal point) are known
* image is undistorted and stored as Frame object

2. tracking (estimate camera pose)
goal: figure out where the new frame is relative to the last keyframe
* direct image alignment: Instead of using features (ORB, SIFT), LSD-SLAM directly minimizes photometric error
where w(p,T) warps pixel p using the current pose hypothesis T
* Optimized with Gauss-Newton → gives a 6-DoF pose (SE3)

3. Depth Map estimation (semi-dense mapping)
goal: build a depeth hypothesis for each pixel with sufficient gradient
* for selected pixels (edges, gradients), lsd slam maintains:
  * depth estimate(mean of inverse depth)
  * uncertainty (variance)
* new frames update these via stereo comparisons:
  * project pixel onto new frame
  * refine depth with small baseline stereo matching
* over time, uncertainty decreases -> depth map becomes more accurate

4. keyframe management
* not every frame becomes a keyframe(too expensive)
* criteria: enough camera motion of scene change
* when chosen:
  * store image + depth hypotheses
  * depth refinement continues across multiple future frames.

5. pose graph optim (global consistency)
goal: avoid drift by loop closure
* every keyframe is a node in a graph
* edges are relative sim(3) transformations(scale + rotation + translation)
* if system recognizes overlap between two distant keyframes -> loop closure edge is added
* optim (g2o) adjusts the whole graph to enforce global consistency.

6. map output
* Result: globally consistent semi-dense map of scene surfaces.
* Only high-gradient pixels have depth → that’s why LSD-SLAM is called semi-dense.
* map can be meshed or visualized as a point cloud
